package main

import (
	"fmt"
	"sync"
	"time"
)

//! QuickSort

//? Recursively splits array into halves until it is a single element then start sorting
func quickSort(arr []int) []int {
	var wg sync.WaitGroup
	var left, right []int
	var pivot int

	if len(arr) <= 1 {
		return arr
	}

	pivot = arr[0]
	arr = arr[1:]

	for _, num := range arr {
		if num > pivot {
			right = append(right, num)
		} else {
			left = append(left, num)
		}
	}

	wg.Add(2)
	go func() {
		defer wg.Done()
		right = quickSort(right)
	}()
	go func() {
		defer wg.Done()
		left = quickSort(left)
	}()

	wg.Wait()

	return append(append(left, pivot), right...)
}

//! MergeSort

//? Takes two sorted arrays and makes one single sorted array
func merge(left, right []int) []int {
	i, j := 0, 0
	result := make([]int, 0, len(left)+len(right))

	for i < len(left) && j < len(right) {
		if left[i] > right[j] {
			result = append(result, right[j])
			j++
		} else {
			result = append(result, left[i])
			i++
		}
	}

	result = append(result, left[i:]...)
	result = append(result, right[j:]...)

	return result
}

//? Recursively splits array into halves until it is a single element then start merging
func mergeSort(arr []int) []int {
	var wg sync.WaitGroup
	var left, right []int
	middle := len(arr) / 2

	if len(arr) <= 1 {
		return arr
	}

	wg.Add(2)
	go func() {
		defer wg.Done()
		right = mergeSort(arr[middle:])
	}()
	go func() {
		defer wg.Done()
		left = mergeSort(arr[:middle])
	}()

	wg.Wait()

	return merge(left, right)
}

//! Main

func main() {
	//? Array of 1000 random numbers ranging from 1-1500
	arr := []int{1315, 1392, 1183, 984, 872, 1049, 114, 302, 1366, 450, 471, 277, 307, 1362, 400, 1236, 1194, 888, 337, 1296, 374, 1061, 1349, 267, 183, 953, 314, 831, 270, 75, 1450, 784, 687, 1247, 475, 778, 364, 1352, 4, 389, 335, 294, 1113, 1111, 1095, 533, 1474, 1369, 851, 159, 773, 410, 929, 65, 1036, 1466, 214, 1433, 474, 699, 368, 1442, 298, 1495, 885, 879, 1232, 489, 1224, 743, 1196, 469, 531, 1429, 490, 245, 1340, 978, 351, 776, 430, 1050, 957, 299, 221, 1290, 231, 32, 478, 60, 782, 1500, 321, 646, 823, 1177, 319, 602, 334, 12, 834, 386, 1127, 1456, 1071, 882, 116, 312, 1387, 1309, 571, 1124, 434, 896, 21, 726, 119, 581, 558, 734, 633, 768, 276, 692, 1161, 658, 263, 1303, 460, 1029, 1105, 1320, 1218, 178, 1321, 868, 849, 1209, 662, 1389, 592, 137, 580, 1400, 1198, 1374, 1026, 1184, 188, 666, 688, 807, 1258, 1344, 1221, 1220, 1485, 914, 844, 1003, 775, 11, 154, 292, 161, 336, 998, 390, 67, 387, 110, 1063, 467, 745, 615, 840, 411, 1066, 26, 1115, 576, 1246, 1162, 311, 1262, 800, 156, 1378, 636, 444, 356, 100, 309, 1261, 1096, 1053, 385, 125, 451, 141, 97, 861, 470, 1472, 938, 448, 79, 510, 1295, 652, 1114, 943, 251, 191, 981, 590, 643, 1488, 242, 1195, 480, 289, 705, 1030, 237, 56, 163, 24, 1146, 1093, 296, 66, 742, 927, 393, 1367, 167, 223, 824, 1364, 922, 1169, 1299, 825, 2, 421, 1170, 1379, 715, 253, 886, 785, 713, 987, 447, 235, 234, 1219, 1011, 315, 136, 1447, 747, 1001, 262, 598, 1267, 1231, 845, 7, 381, 1012, 1328, 82, 1397, 1286, 29, 873, 14, 1197, 799, 706, 817, 617, 168, 701, 991, 599, 893, 722, 1057, 837, 457, 1126, 1082, 795, 1441, 546, 1421, 689, 1078, 952, 1308, 642, 51, 673, 1079, 809, 1155, 206, 635, 627, 143, 791, 1448, 1403, 794, 544, 614, 1415, 573, 170, 80, 273, 1426, 197, 64, 295, 1041, 341, 711, 1043, 1083, 442, 1476, 1492, 1165, 1065, 1103, 268, 1015, 1235, 1028, 349, 659, 1022, 1471, 864, 1222, 39, 1008, 282, 1445, 1175, 344, 417, 1467, 719, 482, 1343, 608, 1230, 78, 1062, 1300, 1150, 1216, 1420, 821, 1277, 567, 491, 1058, 1025, 1149, 1285, 1394, 492, 774, 216, 182, 414, 783, 179, 1228, 843, 122, 512, 301, 484, 1402, 866, 690, 38, 919, 5, 230, 322, 760, 1259, 1291, 932, 514, 527, 1116, 848, 923, 506, 92, 84, 316, 1301, 626, 1302, 638, 767, 553, 1104, 1101, 422, 639, 352, 1443, 189, 832, 728, 830, 149, 696, 121, 52, 839, 891, 865, 858, 1067, 111, 93, 1016, 811, 382, 876, 717, 714, 1336, 1226, 465, 1278, 62, 404, 936, 550, 1310, 1056, 1241, 499, 1073, 655, 373, 202, 502, 118, 397, 1263, 1086, 48, 70, 363, 41, 551, 1416, 185, 649, 1354, 1055, 565, 439, 1273, 985, 522, 249, 755, 1074, 541, 1339, 965, 488, 1383, 256, 854, 124, 1382, 1141, 1068, 126, 1314, 140, 752, 1407, 902, 1446, 707, 1437, 917, 166, 371, 645, 640, 1204, 461, 835, 398, 631, 911, 1338, 712, 503, 869, 350, 1090, 560, 47, 612, 1357, 552, 996, 464, 833, 603, 597, 1316, 208, 1422, 1342, 1411, 604, 1010, 72, 806, 418, 269, 34, 975, 28, 988, 53, 1156, 1482, 910, 941, 413, 109, 942, 731, 1233, 543, 993, 406, 1007, 525, 117, 610, 1284, 962, 1145, 507, 787, 724, 1410, 353, 1335, 87, 1405, 1470, 325, 258, 691, 1384, 50, 104, 152, 1453, 320, 176, 1396, 1212, 30, 818, 31, 918, 852, 394, 700, 874, 377, 1282, 564, 855, 219, 1493, 88, 827, 254, 594, 193, 347, 370, 812, 708, 278, 476, 248, 220, 539, 1018, 976, 1227, 1172, 485, 305, 770, 1458, 562, 736, 790, 1322, 704, 805, 227, 1293, 769, 949, 54, 98, 596, 545, 1153, 446, 326, 105, 265, 1080, 997, 132, 1109, 103, 969, 138, 1478, 1174, 1118, 357, 954, 1312, 1044, 1375, 729, 96, 694, 524, 290, 355, 1106, 1237, 1274, 454, 1037, 1457, 622, 428, 380, 1242, 57, 1013, 920, 504, 213, 74, 1140, 250, 1005, 44, 1059, 463, 1092, 293, 1255, 1160, 1252, 661, 505, 529, 572, 155, 449, 894, 951, 1398, 903, 1207, 1225, 536, 85, 283, 959, 684, 1202, 438, 1370, 108, 950, 693, 134, 548, 588, 1128, 644, 345, 1168, 836, 859, 1154, 171, 272, 759, 43, 853, 1229, 1110, 686, 616, 758, 195, 1463, 1395, 883, 909, 1469, 777, 756, 1497, 128, 1201, 838, 1330, 1449, 964, 408, 433, 797, 456, 1496, 1408, 1223, 982, 961, 1144, 857, 1311, 1102, 76, 452, 1276, 1260, 328, 721, 606, 90, 925, 788, 323, 86, 944, 928, 1428, 589, 1268, 55, 516, 129, 1256, 266, 1270, 1253, 113, 1280, 481, 1418, 540, 375, 16, 205, 49, 1404, 33, 738, 587, 1412, 472, 1483, 537, 362, 310, 186, 1091, 703, 458, 1210, 867, 94, 786, 1077, 275, 69, 91, 15, 361, 921, 585, 147, 1099, 419, 1481, 198, 1133, 1371, 940, 169, 22, 329, 1132, 420, 1409, 35, 513, 153, 462, 899, 757, 437, 279, 1157, 656, 1487, 239, 1454, 1238, 568, 1498, 1313, 1164, 671, 753, 892, 1084, 523, 682, 1307, 1034, 1353, 1427, 1248, 59, 683, 930, 494, 810, 697, 1475, 1332, 847, 1358, 1294, 1006, 346, 68, 123, 1021, 20, 1182, 1192, 977, 1271, 247, 904, 674, 992, 1333, 145, 1119, 549, 973, 1159, 473, 1346, 926, 486, 946, 884, 1373, 630, 1136, 637, 863, 281, 1347, 1254, 798, 1440, 1287, 1206, 260, 900, 280, 425, 508, 535, 934, 559, 933, 359, 172, 264, 1108, 842, 1360, 676, 40, 680, 1359, 203, 1181, 331, 201, 725, 496, 45, 36, 1004, 284, 131, 1142, 939, 908, 862, 685, 333, 781, 968, 396, 1494, 479, 271, 415, 611, 1468, 1193, 1486, 730, 750, 980, 1406, 1023, 407, 1032, 285, 13, 751, 164, 1185, 1489, 338, 1045, 1208, 1060, 1390, 158, 820, 212, 1305, 815, 1319, 556, 990, 342, 1240, 1070, 366, 1361, 960, 841, 555, 780, 1249, 829, 1179, 789, 115, 1350, 971 }
	// fmt.Println("Unsorted array:", arr)

    //? Declare variables to avoid interference with execution time later
    var startTime time.Time
    var elapsedTime time.Duration
    var sortedArr []int

    //! MergeSort
	startTime = time.Now()
	sortedArr = mergeSort(arr)
	elapsedTime = time.Since(startTime)
	fmt.Println("Merge Sorted array:", len(sortedArr))
	// fmt.Println("Merge Sorted array:", sortedArr)
	fmt.Println("MergeSort execution time:", elapsedTime)
    
    //! QuickSort
	startTime = time.Now()
	sortedArr = quickSort(arr)
	elapsedTime = time.Since(startTime)
	fmt.Println("Quick Sorted array:", len(sortedArr))
	// fmt.Println("Quick Sorted array:", sortedArr)
	fmt.Println("QuickSort execution time:", elapsedTime)
}